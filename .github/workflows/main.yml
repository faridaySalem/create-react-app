name: 'Build, Test & Deploy'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: 'Build (${{ matrix.os }}, Node ${{ matrix.node }})'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-latest'
        node:
          - '16'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci --prefer-offline --ignore-scripts  # Ignore postinstall scripts
      - name: Build
        run: npm run build

      - name: Deploy to S3
        if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          npm install -g aws-cli
          aws s3 sync ./build s3://farida-2001 --delete

      - name: Invalidate CloudFront
        if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='farida-2001.s3.amazonaws.com'].Id" --output text)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  integration:
    name: 'Integration Tests (${{ matrix.os }}, Node ${{ matrix.node }})'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-latest'
          - 'macos-latest'
          - 'windows-latest'
        node:
          - '16'
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci --prefer-offline --ignore-scripts  # Ignore postinstall scripts
      - name: Install yarn
        run: npm i -g yarn
      - name: Run integration tests
        run: npm run test:integration

  e2e-simple:
    name: E2E Simple
    uses: ./.github/workflows/e2e-base.yml
    with:
      testScript: 'tasks/e2e-simple.sh'

  e2e-installs:
    name: E2E Installs
    uses: ./.github/workflows/e2e-base.yml
    with:
      testScript: 'tasks/e2e-installs.sh'

  e2e-kitchensink:
    name: E2E Kitchensink
    uses: ./.github/workflows/e2e-base.yml
    with:
      testScript: 'tasks/e2e-kitchensink.sh'
